/**
 * @author sunlei11@baidu.com.
 * @description 一个简单的 Node mysql 工具包，简单的进行了封装，无需太多的关心错误处理与数据库连接
 * 2014/7/31
 */
'use strict';
var _ = require('underscore'),
    mysql = require('mysql');

var dbUtil = {

    defaultOptions: {
        //登录信息
        host: "localhost",
        user: "root",
        password: "password",

        // 数据库连接池信息
        usePool: true,
        connectionLimit: 10

    },

    /**
     * 配置数据库连接信息
     * @param options
     */
    init: function (options) {
        this.connectionOptions = _.extend(_.clone(this.defaultOptions), options);
        if (this.connectionOptions.usePool === true) {
            this.pool = mysql.createPool(this.connectionOptions);
        }
        return this;
    },

    /**
     * 获取一个数据库连接，并在回调中使用
     * @param callback 接收一个数据库连接作为参数
     * @private
     */
    _useConnection: function (callback) {
        if (this.pool) {
            this.pool.getConnection(function(error, connection) {
                if (error) {
                    console.error('error connecting: ' + error.stack);
                    return;
                }

                // 通过回调函数使用数据库连接
                callback(connection);

                // 将数据库连接返回给数据库连接池
                connection.release();
            });
        } else {
            var connection = mysql.createConnection(this.connectionOptions);
            connection.connect(function(error) {
                if (error) {
                    console.error('error connecting: ' + error.stack);
                    return;
                }

                // 通过回调函数使用数据库连接
                callback(connection);

                // 关闭数据库连接
                connection.end(function(error) {
                    if (error) {
                        console.error(error.stack);
                    }
                });
            });
        }
    },

    /**
     * 执行 sql
     * @param sql
     * @param values
     * @param callback
     */
    exec: function (sql, values, callback) {
        if (arguments.length == 2) {
            callback = values;
            values = null;
        }
        this._useConnection(function (connection) {
            connection.query(sql, values, function (error, result) {
                if (error) {
                    console.error(error.stack);
                    return;
                }
                callback(result);
            });
        });
    },

    escape: mysql.escape
};

module.exports = dbUtil;